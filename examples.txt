(* originals *)
true;;
let x = true in x;;
if false then true else false;;
0;;
succ (succ (succ 0));;
3;;
succ (pred 0);;
iszero (pred (succ (succ 0)));;
if iszero 3 then 0 else 1;;
iszero true;;
if 1 then true else false;;
if iszero 3 then 0 else false;;
let id = Lx.x in id 3;;
let id_bool = L x:Bool. x in id_bool true;;
let id_nat = L x:Nat. x in id_nat 5;;
let x = 5 in let id_nat = L x:Nat. x in id_nat x;;
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in let sum = fix sumaux in sum 21 34;;
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in let sum = fix sumaux in let prodaux = lambda f. (lambda n. (lambda m. if (iszero m) then 0 else sum n (f n (pred m)))) in let prod = fix prodaux in prod 12 5;;

(* added after lambda-3 *)
sum = letrec sum : Nat -> Nat -> Nat =
lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in
sum
;;

prod = letrec prod : Nat -> Nat -> Nat =
lambda n : Nat. lambda m : Nat. if iszero n then 0 else if iszero m then 0 else sum n (prod (pred m) n) in
prod
;;

fib = letrec fib : Nat -> Nat = 
lambda n : Nat. if iszero n then 1 else if iszero (pred n) then 1 else sum (fib (pred (pred n))) (fib (pred n)) in
fib
;;

fact = letrec fact : Nat -> Nat =
lambda n : Nat. if iszero n then 1 else prod n (fact (pred n)) in
fact
;;

sum 24 35;;
prod 4 4;;
fib 10;;
fact 5;;

"Cad3n4";;
"cad3" ^ "n4";;
"" ^ ((Lx:String. x^"by") "ru");;

p = {2, true};;
p2 = {false, p};;
pair = {p, p2};;
first pair;;
second pair;;

nil[Nat];;
cons[Nat] 10 (nil[Nat]);;
empty_list = nil[Nat];;
list1 = cons[Nat] 11 (cons[Nat] 77 (cons[Nat] 6 (nil[Nat])));;
isnil[Nat] empty_list;;
isnil[Nat] list1;;
head[Nat] list1;;
tail[Nat] list1;;

len = letrec len : (Nat list) -> Nat = lambda l : Nat list. if (isnil[Nat] l) then 0 else (succ (len (tail[Nat] l)))
in len;;
len empty_list;;
len list1;;

list2 = cons[Nat] 32 (cons[Nat] 9 (cons[Nat] 16 (cons[Nat] 5 (nil[Nat]))));;



append = letrec append : (Nat list) -> (Nat list) -> Nat list = lambda ap1: Nat list. lambda ap2: Nat list.
	if (isnil[Nat] ap1) then
		ap2
	else
		if (isnil[Nat] (tail[Nat] ap1)) then	
			cons[Nat] (head[Nat] ap1) ap2
		else
			cons[Nat] (head[Nat] ap1) (append (tail[Nat] ap1) ap2) 
in append;;

append list1 list2;;

list_fib = cons[Nat] 4 (cons[Nat] 3 (cons[Nat] 10 (cons[Nat] 5 (nil[Nat]))));;

(* first define sum and fib *)
func = lambda x:Nat. fib x;;

map = letrec map : (Nat list) -> (Nat -> Nat) -> Nat list =
lambda lst: Nat list. lambda f: (Nat -> Nat). 
        if (isnil[Nat] (tail[Nat] lst)) then
                cons[Nat] (f (head[Nat] lst)) (nil[Nat])
        else
                cons[Nat] (f (head[Nat] lst)) (map (tail[Nat] lst) f)
in map;;
map list_fib func;;

();;
unit;;


tuple = {pair, 2, 3};;
tuple.1;;
first (tuple.1);;

record = {a = {a = 1, b = 2}, b = tuple};;
record.a;;
(record.a).b;;
record.b;;
{};;
